
buildscript {

    ext {
        gradle_node_plugin_version = '1.2.0'
    }

    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://dl.bintray.com/kotlin/kotlin-dev" }
        mavenCentral()
    }
    dependencies {
        classpath "com.moowork.gradle:gradle-node-plugin:$gradle_node_plugin_version"
    }
}

plugins {
    id 'com.bmuschko.docker-remote-api'
}

apply plugin: 'kotlin-platform-js'
apply plugin: "kotlin2js"
apply plugin: "kotlin-dce-js"
apply plugin: "com.moowork.node"


ext {
    wrapper_react_version='16.4.2-pre.50-kotlin-1.2.61'
    wrapper_extentions_version = '1.0.1-pre.50-kotlin-1.2.61'
}

node {
    download = true
}

repositories {
    maven { url "http://dl.bintray.com/kotlin/kotlin-dev" }
    maven { url "http://dl.bintray.com/kotlin/kotlin-js-wrappers/" }
    maven { url  "http://dl.bintray.com/kotlin/kotlinx.html/" }
    mavenCentral()
}

dependencies {
    compile "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$kotlin_coroutine_version"

    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"

    compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_version"

    compile "org.jetbrains:kotlin-extensions:$wrapper_extentions_version"
    compile "org.jetbrains:kotlin-react:$wrapper_react_version"
    compile "org.jetbrains:kotlin-react-dom:$wrapper_react_version"


    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
    expectedBy project(":common")
}

compileKotlin2Js {
    kotlinOptions {
        sourceMap = true
        sourceMapEmbedSources = "always"
        moduleKind = 'commonjs'
        metaInfo = false
    }
}

task copyCss(type: Copy) {
    from fileTree("$project.projectDir/src/main/kotlin") { include("**/*.css", "**/*.scss") } .files
    into "$buildDir/web/styles"
}

task copyStatic(type: Copy, dependsOn: copyCss) {
    from "$project.projectDir/src/main/web"
    into "$buildDir/web"
}

task buildBundle(type: NpmTask, dependsOn: [npmInstall, runDceKotlinJs, copyStatic]) {
    args = ["run", "dist"]
}

task run(type: NpmTask) {
    args = ["run", "serve"]
}

task devBuild(dependsOn: [npmInstall, copyStatic, runDceKotlinJs])

assemble.dependsOn buildBundle, copyStatic

kotlin {
    experimental {
        coroutines "enable"
    }
}

// Import task types

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

task dockerBuildImage(type: DockerBuildImage) {
    dependsOn build
    inputDir = file(".")
    buildArgs = ["WWWFILES": "./build/web"]
    tags.add("infowings/knet-frontend:$version")
}

task dockerPushImage(type: DockerPushImage) {
    dependsOn dockerBuildImage
    imageName = "infowings/knet-frontend:$version"
}
